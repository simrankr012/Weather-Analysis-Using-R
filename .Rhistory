}
print(out)
}
rm(list=ls())
ls()
X<-c(0.2,0.5)
N<-length(X)
for (i in (N-1))
{
while(i<N)
{
a=X[i]
b=X[i+1]
out<-((100*((b -((a)^2))^2)) + ((1-a)^2))
}
print(out)
}
a=2
a
a=2
print(a)
rm(list=ls())
ls()
X<-c(0.2,0.5)
N<-length(X)
for (i in (N-1))
{
while(i<N)
{
a=X[i]
b=X[i+1]
out<-((100*((b -((a)^2))^2)) + ((1-a)^2))
}
print(out)
}
rosenbrock_banana<-function(x){
N<-length(x)
for(i in c(1:N-1)){
print(i)
}
}
X<-c(0.2,0.5)
rosenbrock_banana(X)
N<-2
c(1:N-1)
N<-2
c(1,N)
c(1:7)
rosenbrock_banana<-function(x){
N<-length(x)
for(i in c(1:(N-1))){
print(i)
}
}
X<-c(0.2,0.5)
rosenbrock_banana(X)
rosenbrock_banana<-function(x){
finalSum <- 0
N<-length(x)
for(i in c(1:(N-1))){
finalSum <- 100*((x[i+1]-(x[i]^2))^2)+ ((1-x[i])^2)
}
return(finalSum)
}
X<-c(0.2,0.5)
rosenbrock_banana(X)
X<-c(0.2,0.5,0.1,0.6)
rosenbrock_banana(X)
X<-c(0.2,0.5,0.1,0.6)
rosenbrock_banana(X)
rm(list=ls())
ls()
rosenbrock_banana<-function(x){
finalSum <- 0
N<-length(x)
for(i in c(1:(N-1))){
finalSum <- 100*((x[i+1]-(x[i]^2))^2)+ ((1-x[i])^2)
}
return(finalSum)
}
X<-c(0.2,0.5,0.1,0.6)
rosenbrock_banana(X)
X<-c(0.2,0.5)
rosenbrock_banana(X)
knitr::opts_chunk$set(echo = TRUE)
banana_func_noloop <- function(t){
# Length of the input vector
n <- length(t)
# Creating vector from 1st to second last value
ti <- t[1:(n-1)]
print(ti)
# Creating vector from 2nd to last value
t_next <- t[2:n]
print(t_next)
# Sum function to calculate Rosenbrock
sum <- sum(100*(t_next-ti^2)^2 + (ti-1)^2)
y <- sum
return(y)
}
t <- c(0.2,0.5)
banana_func_noloop(t)
banana_func_noloop <- function(t){
# Length of the input vector
n <- length(t)
# Creating vector from 1st to second last value
ti <- t[1:(n-1)]
print(ti)
# Creating vector from 2nd to last value
t_next <- t[2:n]
print(t_next)
# Sum function to calculate Rosenbrock
sum <- sum(100*(t_next-ti^2)^2 + (ti-1)^2)
y <- sum
return(y)
}
t <- c(0.2,0.5)
banana_func_noloop(t)
t<-c(0.2,0.5,0.1,0.6)
banana_func_noloop(t)
data<-aggregate(lawyers$Age, list(office= lawyers$Office), FUN=median)
hi<-read.table("C:/Users/Simran/Desktop/UCD 10SEP/40730 Data Prog with R/assignment 2/2018_09_Dublin_Airport.csv",header=FALSE,sep=" ")
hi
hi
source('~/.active-rstudio-document', echo=TRUE)
x <- c(88, 5, 12, 13)
x
x <- c(x[1:3], 168, x[4])
x
x<-x[-4]
x
output$myPanel <- renderUI({
lev <- sort(unique(lawyers$maxtp)) # sorting so that "things" are unambigious
cols <- gg_fill_hue(length(lev))
# New IDs "colX1" so that it partly coincide with input$select...
lapply(seq_along(lev), function(i) {
colourInput(inputId = paste0("col", lev[i]),
label = paste0("Choose colour for ", lev[i]),
value = cols[i]
)
})
})
if (interactive()) {
cols <- plotHelper()
cols <- plotHelper(colours = c("red", "blue"))
cols <- plotHelper(colours = 5)
library(ggplot2)
cols <- plotHelper(ggplot(mtcars, aes(mpg,wt)) +
geom_point(aes(col = as.factor(cyl)))+
scale_colour_manual(values = CPCOLS))
}
library('plotHelper')
if (interactive()) {
cols <- plotHelper()
cols <- plotHelper(colours = c("red", "blue"))
cols <- plotHelper(colours = 5)
library(ggplot2)
cols <- plotHelper(ggplot(mtcars, aes(mpg,wt)) +
geom_point(aes(col = as.factor(cyl)))+
scale_colour_manual(values = CPCOLS))
}
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
library(ggplot2)
ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_line(aes(y = DublinAirport$maxtp, colour = "red")) +
geom_line(aes(y = DublinAirport$mintp, colour = "blue"))
}
library(ggplot2)
ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_line(aes(y = DublinAirport$maxtp, colour = "red")) +
geom_line(aes(y = DublinAirport$mintp, colour = "blue"))
library(ggplot2)
ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_line(aes(y = DublinAirport$maxtp, colour = "red")) +
geom_line(aes(y = DublinAirport$mintp, colour = "blue"))
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
library(ggplot2)
ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_line(aes(y = DublinAirport$maxtp, colour = "red")) +
geom_line(aes(y = DublinAirport$mintp, colour = "blue"))
}
library(ggplot2)
plt<-ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_line(aes(y = DublinAirport$maxtp, colour = "red")) +
geom_line(aes(y = DublinAirport$mintp, colour = "blue"))
geom_line(aes(y = DublinAirport$maxtp, colour = "red")) +
geom_line(aes(y = DublinAirport$mintp, colour = "blue"))
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
library(ggplot2)
plt<-ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_point(aes(y = DublinAirport[,3], color = "Red")) + #plotting the maximum point of maxtp attribute
geom_line(aes(y = DublinAirport[,3], color = "Red")) + #line plot for maxtp column
geom_point(aes(y = DublinAirport[,4], color = "Blue")) +#plotting the minimum point of mintp attribute
geom_line(aes(y = DublinAirport[,4], color = "Blue")) + #line plot for mintp attribute
labs(x = "Date", y = "Temperature")
}
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
library(ggplot)
plt<-ggplot(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_point(aes(y = DublinAirport[,3], color = "Red")) + #plotting the maximum point of maxtp attribute
geom_line(aes(y = DublinAirport[,3], color = "Red")) + #line plot for maxtp column
geom_point(aes(y = DublinAirport[,4], color = "Blue")) +#plotting the minimum point of mintp attribute
geom_line(aes(y = DublinAirport[,4], color = "Blue")) + #line plot for mintp attribute
labs(x = "Date", y = "Temperature")
}
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
install.packages("ggplot2")
library(ggplot2)
plt<-ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_point(aes(y = DublinAirport[,3], color = "Red")) + #plotting the maximum point of maxtp attribute
geom_line(aes(y = DublinAirport[,3], color = "Red")) + #line plot for maxtp column
geom_point(aes(y = DublinAirport[,4], color = "Blue")) +#plotting the minimum point of mintp attribute
geom_line(aes(y = DublinAirport[,4], color = "Blue")) + #line plot for mintp attribute
labs(x = "Date", y = "Temperature")
}
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
install.packages("ggplot2")
library(ggplot2)
plt<-ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_point(aes(y = DublinAirport[,3], color = "Red")) + #plotting the maximum point of maxtp attribute
geom_line(aes(y = DublinAirport[,3], color = "Red")) + #line plot for maxtp column
geom_point(aes(y = DublinAirport[,4], color = "Blue")) +#plotting the minimum point of mintp attribute
geom_line(aes(y = DublinAirport[,4], color = "Blue")) + #line plot for mintp attribute
labs(x = "Date", y = "Temperature")
}
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
#  install.packages("ggplot2")
library(ggplot2)
plt<-ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_point(aes(y = DublinAirport[,3], color = "Red")) + #plotting the maximum point of maxtp attribute
geom_line(aes(y = DublinAirport[,3], color = "Red")) + #line plot for maxtp column
geom_point(aes(y = DublinAirport[,4], color = "Blue")) +#plotting the minimum point of mintp attribute
geom_line(aes(y = DublinAirport[,4], color = "Blue")) + #line plot for mintp attribute
labs(x = "Date", y = "Temperature")
}
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
#  install.packages("ggplot2")
library(ggplot2)
plt<-ggplot2(DublinAirport, aes(DublinAirport$date)) + #specifying attribute for x axis
geom_point(aes(y = DublinAirport[,3], color = "Red")) + #plotting the maximum point of maxtp attribute
geom_line(aes(y = DublinAirport[,3], color = "Red")) + #line plot for maxtp column
geom_point(aes(y = DublinAirport[,4], color = "Blue")) +#plotting the minimum point of mintp attribute
geom_line(aes(y = DublinAirport[,4], color = "Blue")) + #line plot for mintp attribute
labs(x = "Date", y = "Temperature")
}
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
#  install.packages("ggplot2")
library(ggplot2)
plt<-ggplot(DublinAirport, aes(DublinAirport[,1])) + #specifying attribute for x axis
geom_point(aes(y = DublinAirport[,3], color = "Red")) + #plotting the maximum point of maxtp attribute
geom_line(aes(y = DublinAirport[,3], color = "Red")) + #line plot for maxtp column
geom_point(aes(y = DublinAirport[,4], color = "Blue")) +#plotting the minimum point of mintp attribute
geom_line(aes(y = DublinAirport[,4], color = "Blue")) + #line plot for mintp attribute
labs(x = "Date", y = "Temperature")
}
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
---
title: "Assignment2 --18205085 Simran Kaur"
author: "Simran Kaur"
date: "8 November 2018"
output: html_document
---
#Task 1 - Analysis
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
#####Reading the Lawyers.csv file.
```{r}
setwd("C:/Users/Simran/Desktop/UCD 10SEP/40730 Data Prog with R/assignment 2")
lawyers<-read.csv('Lawyers.csv',header=TRUE, sep=',')
```
#####This file contains 7 variables which are recorded on 71 lawyers in a northeastern American law firm.
#####Dimensions of the data frame
```{r}
cat("Dimesions of the dataframe" ,dim(lawyers))
```
#####Structure of the data frame
```{r}
str(lawyers)
```
#####Summary of the dataset
```{r}
summary(lawyers)
```
#####Que 1 Calculating the proportion of Lawyers who practice Litigation Law
```{r}
lit<-length(which(lawyers$Practice=='Litigation'))
total<-length(lawyers$Practice)
proportion<-((lit/total)*100)
cat('The proportion of Lawyers who practice Litigation Law is :', format(round(proportion,2)),'%') # rounding off the proportion to 2 decimal places
```
<!-- Method 2 of calculating the proportion. The upper method is chosen because of less time complexity
count=0
for(i in lawyers$Practice) -->
<!-- { -->
<!--   if(i=='Litigation') -->
<!-- { -->
<!--   count=count+1 -->
<!-- } -->
<!-- } -->
<!-- count -->
#####Que 2 Checking whether the proportion of lawyers in the Boston office that practice corporate law higher
#####than the proportion of lawyers in the Providence office that practice corporate law?
```{r}
a<-nrow(subset(lawyers,lawyers$Office=="Boston" & lawyers$Practice=="Corporate"))
b<-nrow(subset(lawyers,lawyers$Office=="Providence" & lawyers$Practice=="Corporate"))
boston<-((a/total)*100)
cat('proportion of lawyers in boston office is : ',format(round(boston,2)),'%')
providence<-((b/total)*100)
cat('proportion of lawyers in providence office is : ',format(round(providence,2)),'%')
#comparing the proportion of lawyer shwo practice corporate law in boston and providence office
if(boston>providence){
cat("yes the proportion of lawyers practicing corporate law is higher in boston office by",format(round(boston-providence,2)),'%')
}else if(boston==providence)
{
print("the proprotion is equal in both the offices")
} else
{
cat("No the proportion in providence office is higher by",format(round(providence-boston,2)),'%')
}
```
#####Que 3 Average age of lawyers who practice corporate and litigation law, across the different levels of seniority
```{r}
data_age<-setNames(aggregate(lawyers$Age, list(Practice= lawyers$Practice, Seniority=lawyers$Seniority), FUN=mean), c("Practice Type","Seniority Level","Mean Age"))
data_age
```
#####Que 4 The office which has the youngest median age is :
```{r}
data<-aggregate(lawyers$Age, list(office= lawyers$Office), FUN=median)
data
print('The office which has the youngest median age is:')
data[which.min(data$x),]
```
#Task 2 Writing your own function
##### Que1 Write a function which compute the Rosenbrock banana function using a loop. Test
#####the function on the vectors x = (:2; :5) and x = (:2; :5; :1; :6)
#####Method 1 using for loop
```{r}
ptm <- proc.time() #determines how much real and CPU time (in seconds) the currently running R process has already taken
# defining the rosenbrock banana function
rosenbrock_banana<-function(x){
finalSum <- 0 # the final sum will be added to the variable finalSum after each iteration
N<-length(x)  # calculating the length of vector x
for(i in c(1:(N-1))){ # the for loop which will iterate from i=1 to N-1 and value of N is taken                         from length of x
finalSum <- 100*((x[i+1]-(x[i]^2))^2)+ ((1-x[i])^2) # rosenbrock equation to calculate the                                                          final sum. Here X[i] will take 0.2 and                                                        x[i+1] will take 0.5 in the first iteration.
}
return(finalSum) # returning the final sum as output
}
X<-c(0.2,0.5)  # defining the input vector X
rosenbrock_banana(X) # calling the rosenbrock function with input vector X
time<-proc.time() - ptm # final time is calculated here after running the entire loop. the time that the already R running process has taken will be subtracted because we only want to calculate the time for the above loop.
print(time) # printing the final real and cpu time.
```
##### Method 2 using while loop
```{r}
ptm<-proc.time()
rosenbrockbanana_func <- function(x) {
# Variable to add all individual sum
rb_output <- 0
#To see how many times we have to iterate over the loop we use the length of the vector X
N <- length(x)
#i us used as an iterator to iterate over the values in the given vector X
i <- 1 #initialising i with 1
# To execute the function, the vector should have a length of ateast 1. to check this we will use the if condition.
if(N > 1){
# Running while loop to calculate the output by rosenbrock equation
while(i <=N-1) {
# Equation for Rosenbrock banana function
out<- 100 * ((x[i+1] - x[i]**2)**2) + ((1-x[i])**2)
rb_output <- rb_output + out
i <- i + 1
}
}
# Returning the final output computed by the loop
y <- rb_output
return(y)
}
x<-c(0.2,0.5)
rosenbrockbanana_func(x)
x<-c(0.2,0.5,0.1,0.6)
rosenbrockbanana_func(x)
time<-proc.time() - ptm # calculating the time taken when we use while loop
print(time)
```
#####Que 2 Propose an alternative function that does not use any loop. Test the function on the same two vectors.
```{r}
##Method to calculate sum computed by Rosen Brock Equation without using loop
ptm<-proc.time()
rosenbrockbanana_noloop <- function(t){
# Calculating length of the input vector X
n <- length(t)
# Creating a vector ti from 1st to second last value i.e. ti will have values from 0.2 to 0.1
ti <- t[1:(n-1)]
# Creating another vector t_next which will contain values from 2nd index to last i.e. from 0.5 to 0.6
t_next <- t[2:n]
# Sum variable will store the output returned by the Rosenbrock equation
sum <- sum(100*(t_next-ti^2)^2 + (ti-1)^2)
y <- sum
return(y)
}
#calling the function with two vectors
t <- c(0.2,0.5)
rosenbrockbanana_noloop(t)
t<-c(0.2,0.5,0.1,0.6)
rosenbrockbanana_noloop(t)
time<-proc.time()-ptm
print(time)
```
##### Que 3 Compare the timings you obtain by repeating the function calls 100 times
```{r}
x = c(0.2, 0.5, 0.1, 0.6)
start_time <- Sys.time() # noting the time before starting the iteration
for(i in 1:100){ # we will iterate over the loop 100 times
rosenbrockbanana_func(x)
}
end_time <- Sys.time() # taking the final time when the loop ends
Looptime<- end_time - start_time # the time taken by the loop to execute is calculated by subtracting the start time from end time
cat('Time taken by Rosen Brock function using the loop method is: ', Looptime, 'seconds')
#without loop
start_time <- Sys.time()
for(i in 1:100){
rosenbrockbanana_noloop(x)
}
end_time <- Sys.time()
NoLooptime <- end_time - start_time
cat('Time taken by Rosen Brock function without using loop is: ', NoLooptime, 'seconds')
if (NoLooptime > Looptime){
print('Time taken by function without loop is more than loop function.')
}else{
print('Time taken by function while using loop is more than function without loop.')
}
```
# Task 3 Writing S3 methods
##### Que 1 Load in the data as an object called DublinAirport. Assign to the DublinAiport object the classes WeatherData and data.frame.
```{r}
DublinAirport<-read.csv('2018_09_Dublin_Airport.csv',header=TRUE, sep=',')
class(DublinAirport)<-'WeatherData' # assigning class to Dublin Airport variable
class(DublinAirport)<-'data.frame'
class(DublinAirport) # printing the class of Dublin Airport variable
```
##### Que 2. 2. Write an S3 summary method for an object of class WeatherData which produces the following statistical summaries for the rain, maxtp, mintp variables: mean, standard deviation, minimum, maximum.
```{r}
summary.WeatherData <- function(weather_param) {
print("Summary for Rain")
cat("Mean of Rain attribute in Weather data :",mean(data.matrix(weather_param[2])))
cat("\nStandard Deviation of Rain attribute of Weather data:",sd(data.matrix(weather_param[2])))
cat("\nMinimum of Rain attribute of Weather data:",min(data.matrix(weather_param[2])))
cat("\nMaximum of Rain attribute of Weather data:",max(data.matrix(weather_param[2])))
cat("\n\nSummary for maxtp attribute")
cat("\nMean of Maxtp:",mean(data.matrix(weather_param[3])))
cat("\nStandard Deviation of Maxtp:",sd(data.matrix(weather_param[3])))
cat("\nMinimum of Maxtp attribute of Weather data:",min(data.matrix(weather_param[3])))
cat("\nMaximum of Maxtp attribute of Weather data:",max(data.matrix(weather_param[3])))
cat("\n\nSummary for mintp attribute")
cat("\nMean of Mintp attribute of Weather data:",mean(data.matrix(weather_param[4])))
cat("\nStandard Deviation of Mintp attribute of Weather data:",sd(data.matrix(weather_param[4])))
cat("\nMinimum of Mintp attribute of Weather data:",min(data.matrix(weather_param[4])))
cat("\nMaximum of Mintp attribute of Weather data:",max(data.matrix(weather_param[4])))
}
summary.WeatherData(DublinAirport)
```
##### Que 3. Download the new data set 2018 09 Cork Airport.csv from Blackboard, assign the classes WeatherData and data.frame to the object containing the Cork data, and test your function on it.Interpret your findings for Dublin and Cork Airports
```{r}
CorkAirport <- read.csv('2018_09_Cork_Airport.csv')
class(CorkAirport) <- 'WeatherData'
class(CorkAirport) <- 'data.frame'
class(CorkAirport)
```
##### Calculating the summary of Rain, Maxtp and Mintp attributes for Cork Airport
```{r}
summary.WeatherData(CorkAirport)
```
##### Observations: Mean of Rain attribute is higher in case of Cork Airport while Maximum of Maxtp attribute is higher in case of Dublin Airport. It is evident that minimum of Mintp attribute is smaller in case of Dublin Airport.
```{r}
```
#Create an S3 plot method for the class WeatherData that produces the following plots.
```{r}
drawPlot.WeatherData <- function(DublinAirport,tempTitle, rainTitle){
#  install.packages("ggplot2")
library(ggplot2)
plt<-ggplot(DublinAirport, aes(DublinAirport[,1])) + #specifying attribute for x axis
geom_point(aes(y = DublinAirport[,3], color = "Red")) + #plotting the maximum point of maxtp attribute
geom_line(aes(y = DublinAirport[,3], color = "Red")) + #line plot for maxtp column
geom_point(aes(y = DublinAirport[,4], color = "Blue")) +#plotting the minimum point of mintp attribute
geom_line(aes(y = DublinAirport[,4], color = "Blue")) + #line plot for mintp attribute
labs(x = "Date", y = "Temperature")
}
drawPlot.WeatherData(DublinAirport, "Dublin Min- Max Temparature Chart for Sept 2018", "Dubli
n Rain Bar Chart for Sept 2018")
```
print(DublinAirport[,1])
data.matrix(weather_param[2])
data.matrix(weather_param[1])
print(data.matrix(weather_param[1]))
print(DublinAirport)
print(weather_param)
